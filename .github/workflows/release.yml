name: Pet Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

env:
  VERSION: ${{ github.ref_name }}
  PARENT_POM: pet-parent/pom.xml

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Validate version number
        run: |
          echo Verifying that ${{ env.VERSION }} is the same as parent POM version
          test ${{ env.VERSION }} = $(sed -n -r 's/.+<revision>([0-9]+\.[0-9]+\.[0-9]+)<\/revision>/\1/p' ${{ env.PARENT_POM }})

  last-run-numbers:
    runs-on: ubuntu-latest
    needs:
      - validate-version
    outputs:
      cat-service: ${{ steps.cat-service.outputs.last-run-number }}
    steps:
      - uses: actions/checkout@v2
      - id: base-branch-name
        uses: ./.github/actions/base-branch-name
        with:
          version: ${{ env.VERSION }}
      - id: cat-service
        uses: ./.github/actions/last-workflow-run-number
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          workflow-name: cat-service
          branch-name: ${{ steps.base-branch-name.outputs.branch-name }}
          
  release-notes:
    runs-on: ubuntu-latest
    needs: last-run-numbers
    steps:
      - name: Generate release notes
        run: |
          echo "These are the release notes" >> release-notes.txt
          echo "Application build numbers in this release:" >> release-notes.txt
          echo "* cat-service: ${{ env.VERSION }}-gh${{ needs.last-run-numbers.outputs.cat-service }}" >> release-notes.txt
      - name: Upload release notes artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release-notes.txt

  release:
    runs-on: ubuntu-latest
    needs: release-notes
    steps:
      - uses: actions/checkout@v2
      - name: Download release notes artifact
        uses: actions/download-artifact@v3
        with:
          name: release-notes
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.VERSION }} --notes-file release-notes.txt --title "${{ env.VERSION }}"

  promote:
    runs-on: ubuntu-latest
    needs: last-run-numbers
    steps:
      - name: Promote to ACR
        run: |
          echo "This would be where we would promote the latest builds"
          echo ${{ env.VERSION }}
          echo "Promoting cat-service build ${{ env.VERSION }}-gh${{ needs.last-run-numbers.outputs.cat-service }}"

  maintenance-branch:
    if: endsWith(github.ref_name, '.0') # Only versions on the main branch have no patch version
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
      - id: maintenance-branch-name
        uses: ./.github/actions/maintenance-branch-name
        with:
          version: ${{ env.VERSION }}
      - id: bump-version
        uses: ./.github/actions/bump-maven-revision
        with:
          pom-file: ${{ env.PARENT_POM }}
          version-type: patch
      - uses: ./.github/actions/commit-and-push
        env:
          BRANCH_NAME: ${{ steps.maintenance-branch-name.outputs.branch-name }}
        with:
          branch: ${{ env.BRANCH_NAME }}
          files: ${{ env.PARENT_POM }}
          message: 'Bump minor version in ${{ env.BRANCH_NAME }} to ${{ steps.bump-version.outputs.new-version }}'

  main-branch-minor-version-bump:
    if: endsWith(github.ref_name, '.0')
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - uses: actions/checkout@v2
      - id: bump-version
        uses: ./.github/actions/bump-maven-revision
        with:
          pom-file: ${{ env.PARENT_POM }}
          version-type: minor
      - uses: ./.github/actions/create-and-auto-merge-pull-request
        with:
          message: 'Bump minor version in main to ${{ steps.bump-version.outputs.new-version }}'
          base: main
          branch: feature/bump-main-branch-minor-version
          approver-token: ${{ secrets.ACTIONS_PAT }}

  maintenance-branch-patch-version-bump:
    if: ${{ !endsWith(github.ref_name, '.0') }}
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
      - id: maintenance-branch-name
        uses: ./.github/actions/maintenance-branch-name
        with:
          version: ${{ env.VERSION }}
      - id: bump-version
        uses: ./.github/actions/bump-maven-revision
        with:
          pom-file: ${{ env.PARENT_POM }}
          version-type: patch
      - uses: ./.github/actions/commit-and-push
        env:
          BRANCH_NAME: ${{ steps.maintenance-branch-name.outputs.branch-name }}
        with:
          branch: ${{ env.BRANCH_NAME }}
          files: ${{ env.PARENT_POM }}
          message: 'Bump minor version in ${{ env.BRANCH_NAME }} to ${{ steps.bump-version.outputs.new-version }}'
