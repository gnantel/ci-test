name: Pet Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: the version of the release (will eventually come from the tag itself)
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  last-run-numbers:
    runs-on: ubuntu-latest
    outputs:
      cat-service: ${{ steps.cat-service.outputs.last-run-number }}
    steps:
      - id: cat-service
        name: Get latest cat-service run number
        run: |
          .github/scripts/output-last-workflow-run-number.sh cat-service ${{ github.repository }}
          
  release-notes:
    runs-on: ubuntu-latest
    needs: last-run-numbers
    steps:
      - name: Generate release notes
        run: |
          echo "These are the release notes" >> release-notes.txt
          echo "Application build numbers in this release:" >> release-notes.txt
          echo "* cat-service: ${{ inputs.version }}-gh${{ needs.last-run-numbers.cat-service }}" >> release-notes.txt
      - name: Upload release notes artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release-notes.txt

  release:
    runs-on: ubuntu-latest
    needs: release-notes
    steps:
      - name: Download release notes artifact
        uses: actions/download-artifact@v3
        with:
          name: release-notes
      - name: Create GitHub release
        run: |
          gh release create ${{ inputs.version }} --notes-file release-notes.txt

  promote:
    runs-on: ubuntu-latest
    needs: last-run-numbers
    steps:
      - name: Promote to ACR
        run: |
          echo "This would be where we would promote the latest builds"
          echo "Promoting cat-service build ${{ inputs.version }}-gh${{ needs.last-run-numbers.cat-service }}"

  maintenance-branch:
    if: endsWith(inputs.version, '.0') # Only versions on the main branch have no patch version
    runs-on: ubuntu-latest
    steps:
      - name: Create maintenance branch
        run: |
          BRANCH_NAME=$(echo ${{ inputs.version }} | sed -r s/^\([0-9]+\.[0-9]+\.\)[0-9]+$/\\1x/)
          echo Creating maintenance branch $BRANCH_NAME
          git push origin origin/${{ inputs.version }}:refs/heads/$BRANCH_NAME

  main-minor-version-bump:
    if: endsWith(inputs.version, '.0') # Main branch releases result in a minor version number bump
    runs-on: ubuntu-latest
    steps:
      - name: Bump minor version
        run: |
          .github/scripts/bump-maven-revision.sh ${{ inputs.version }} minor pet-parent/pom.xml
#          currentMinorVersion=$(echo ${{ inputs.version }} | sed -r s/^\[0-9]+\.\([0-9]+\)\.[0-9]+$/\\1/)
#          newMinorVersion=$((currentMinorVersion + 1))
#          newVersion=$(echo ${{ inputs.version }} | sed -r s/^\([0-9]+\)\.[0-9]+\.[0-9]+$/\\1.$newMinorVersion.0/)
#          sed -i 's/<revision>${{ inputs.version }}<\/revision>/<revision>$newVersion<\/revision>/' pet-parent/pom.xml
#          echo git commit pet-parent/pom.xml -m "Bump minor version to $newVersion"

  maintenance-patch-version-bump:
    if: ${{ !endsWith(inputs.version, '.0') }}
    runs-on: ubuntu-latest
    needs: maintenance-branch
    steps:
      - name: Bump patch version
        run: |
          .github/scripts/bump-maven-revision.sh ${{ inputs.version }} patch pet-parent/pom.xml
#          currentPatchVersion=$(echo ${{ inputs.version }} | sed -r s/^\[0-9]+\.[0-9]+\.\([0-9]+\)$/\\1/)
#          newPatchVersion=$((currentPatchVersion + 1))
#          newVersion=$(echo ${{ inputs.version }} | sed -r s/^\([0-9]+\.[0-9]+\)\.[0-9]+$/\\1.$newPatchVersion/)
#          sed -i 's/<revision>${{ inputs.version }}<\/revision>/<revision>$newVersion<\/revision>/' pet-parent/pom.xml
#          echo git commit pet-parent/pom.xml -m "Bump patch version to $newVersion"
#          BRANCH_NAME=$(echo ${{ inputs.version }} | sed -r s/^\([0-9]+\.[0-9]+\.\)[0-9]+$/\\1x/)
#          gh pr create --base $BRANCH_NAME --title "Bump patch version to $newVersion"
